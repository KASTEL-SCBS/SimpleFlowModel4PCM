/**
 */
package edu.kit.kastel.scbs.simpleflowmodel4pcm.provider;

import edu.kit.kastel.scbs.simpleflowmodel4pcm.util.Simpleflowmodel4pcmAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Simpleflowmodel4pcmItemProviderAdapterFactory extends Simpleflowmodel4pcmAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Simpleflowmodel4pcmItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.Flows} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowsItemProvider flowsItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.Flows}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowsAdapter() {
		if (flowsItemProvider == null) {
			flowsItemProvider = new FlowsItemProvider(this);
		}

		return flowsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.Flow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowItemProvider flowItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.Flow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowAdapter() {
		if (flowItemProvider == null) {
			flowItemProvider = new FlowItemProvider(this);
		}

		return flowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.SignatureSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignatureSourceItemProvider signatureSourceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.SignatureSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignatureSourceAdapter() {
		if (signatureSourceItemProvider == null) {
			signatureSourceItemProvider = new SignatureSourceItemProvider(this);
		}

		return signatureSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.ParameterSource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterSourceItemProvider parameterSourceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.ParameterSource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterSourceAdapter() {
		if (parameterSourceItemProvider == null) {
			parameterSourceItemProvider = new ParameterSourceItemProvider(this);
		}

		return parameterSourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.SignatureIdentification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignatureIdentificationItemProvider signatureIdentificationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.SignatureIdentification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignatureIdentificationAdapter() {
		if (signatureIdentificationItemProvider == null) {
			signatureIdentificationItemProvider = new SignatureIdentificationItemProvider(this);
		}

		return signatureIdentificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.ParameterIdentification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterIdentificationItemProvider parameterIdentificationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.ParameterIdentification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterIdentificationAdapter() {
		if (parameterIdentificationItemProvider == null) {
			parameterIdentificationItemProvider = new ParameterIdentificationItemProvider(this);
		}

		return parameterIdentificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.GenericSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericSinkItemProvider genericSinkItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.GenericSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericSinkAdapter() {
		if (genericSinkItemProvider == null) {
			genericSinkItemProvider = new GenericSinkItemProvider(this);
		}

		return genericSinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.SignatureSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignatureSinkItemProvider signatureSinkItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.SignatureSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignatureSinkAdapter() {
		if (signatureSinkItemProvider == null) {
			signatureSinkItemProvider = new SignatureSinkItemProvider(this);
		}

		return signatureSinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.ParameterSink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterSinkItemProvider parameterSinkItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.kastel.scbs.simpleflowmodel4pcm.ParameterSink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterSinkAdapter() {
		if (parameterSinkItemProvider == null) {
			parameterSinkItemProvider = new ParameterSinkItemProvider(this);
		}

		return parameterSinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (flowsItemProvider != null)
			flowsItemProvider.dispose();
		if (flowItemProvider != null)
			flowItemProvider.dispose();
		if (signatureSourceItemProvider != null)
			signatureSourceItemProvider.dispose();
		if (parameterSourceItemProvider != null)
			parameterSourceItemProvider.dispose();
		if (signatureIdentificationItemProvider != null)
			signatureIdentificationItemProvider.dispose();
		if (parameterIdentificationItemProvider != null)
			parameterIdentificationItemProvider.dispose();
		if (genericSinkItemProvider != null)
			genericSinkItemProvider.dispose();
		if (signatureSinkItemProvider != null)
			signatureSinkItemProvider.dispose();
		if (parameterSinkItemProvider != null)
			parameterSinkItemProvider.dispose();
	}

}
